pipeline {
  environment {
    registry = "vinodgowda417/pipeline-test"
    registryCredential = 'dockerhub'
    dockerImage = ''
  }
  agent any
  stages {
    stage('Cloning Git') {
      steps {
        git 'https://github.com/vinodgowda1477/elotl-sonarqube.git'
      }
    }
    
   stage('SonarQube analysis') {
   steps { 
	script {   
  def scannerHome = tool 'elotl_scanner';
  withSonarQubeEnv('elotl') {
    sh "${scannerHome}/bin/sonar-scanner"
      }
    }
  }
}

    stage("Quality Gate") {
	steps{
	        script {
		      timeout(time: 1, unit: 'HOURS') {
		      def qg = waitForQualityGate()
		      if (qg.status != 'OK') {
			 mail bcc: '', body: "<b>build failed due to sonarqube qaulitygate failure.please check sonarqube for results</b><br> Project: ${env.JOB_NAME} <br>Build Number: ${env.BUILD_NUMBER} <br> URL de build: ${env.BUILD_URL}", cc: '', charset: 'UTF-8', from: '', mimeType: 'text/html', replyTo: '', subject: "ERROR CI: ${env.JOB_NAME}", to: "vinodgowda417@gmail.com";
			 error "piprline aborted due to quality gate failure: ${qg.status}"
          }
	}
     }
  }
}
    stage('oss to audit python packages') {
      steps{
        retry(3) {               
		sh './ossaudit.sh | tee ./ossaudit.log'
		emailext attachmentsPattern: 'ossaudit.log', body: 'Please find the oss audit report attached', subject: 'OSS AUDIT REPORT-> CI: ${env.JOB_NAME} BUILD: ${env.BUILD_NUMBER}', to: 'vinodgowda417@gmail.com';
           }
       }
    }
      stage('License compliance audit') {
      steps{
        retry(3) {               
		sh './scancode.sh'
		emailext attachmentsPattern: 'compliance-report.html', body: 'Please find the scancode audit report attached', subject: 'SCANCODE AUDIT REPORT-> CI: ${env.JOB_NAME} BUILD: ${env.BUILD_NUMBER}', to: 'vinodgowda417@gmail.com';
           }
       }
    }
    stage('Building image') {
      steps{
        script {
          dockerImage = docker.build registry + ":$BUILD_NUMBER"
        }
      }
    }
    
    stage('push Image') {
        agent any
	steps{ script {
	withCredentials([usernamePassword(credentialsId: 'dockerhub', passwordVariable: 'dockerHubPassword', usernameVariable: 'dockerHubUser')]) {
          sh "docker login -u ${env.dockerHubUser} -p ${env.dockerHubPassword}"
	  dockerImage.push()
        }
	}
      }
    }
    stage('Remove Unused docker image') {
      steps{
        sh "docker rmi $registry:$BUILD_NUMBER"
      }
    }
      stage('audit infrasrtucture with scoutsuite') {
      steps{
        retry(3) {            
		withCredentials([string(credentialsId: 'AWS_ACCESS_KEY_ID', variable: 'AWS_ACCESS_KEY_ID'), string(credentialsId: 'AWS_SECRET_ACCESS_KEY', variable: 'AWS_SECRET_ACCESS_KEY')]) {
		sh './scoutsuite.sh $AWS_ACCESS_KEY_ID $AWS_SECRET_ACCESS_KEY'
		emailext attachmentsPattern: 'scoutsuite-report/scout-suite.html', body: 'Please find the scoutsuite report attached', subject: 'SCOUTSUITE AUDIT REPORT-> CI: ${env.JOB_NAME} BUILD: ${env.BUILD_NUMBER}', to: 'vinodgowda417@gmail.com';
  
		}   
           }
       }
    }
  }
  post {  
         success {  
             mail bcc: '', body: "<b>Pipeline completed successfully</b><br> Project: ${env.JOB_NAME} <br>Build Number: ${env.BUILD_NUMBER} <br> URL de build: ${env.BUILD_URL}", cc: '', charset: 'UTF-8', from: '', mimeType: 'text/html', replyTo: '', subject: "Pipeline Successfull: ${env.JOB_NAME}", to: "vinodgowda417@gmail.com";
         }  
         failure {  
             mail bcc: '', body: "<b>build failed.please check jenkins build results</b><br> Project: ${env.JOB_NAME} <br>Build Number: ${env.BUILD_NUMBER} <br> URL de build: ${env.BUILD_URL}", cc: '', charset: 'UTF-8', from: '', mimeType: 'text/html', replyTo: '', subject: "ERROR CI: ${env.JOB_NAME}", to: "vinodgowda417@gmail.com";
         }  
     }  

}

